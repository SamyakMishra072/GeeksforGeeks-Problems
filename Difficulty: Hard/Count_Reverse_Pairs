class Solution {
  public:
    // Function to count reverse pairs in the array
    int countRevPairs(int n, vector<int> &arr) {
        return mergeSort(arr, 0, n - 1);
    }

  private:
    int mergeSort(vector<int> &arr, int low, int high) {
        if (low >= high) return 0;
        
        int mid = (low + high) / 2;
        int count = mergeSort(arr, low, mid) + mergeSort(arr, mid + 1, high);
        count += countPairs(arr, low, mid, high);
        merge(arr, low, mid, high);
        return count;
    }
    
    // Count reverse pairs where arr[i] > 2 * arr[j]
    int countPairs(vector<int> &arr, int low, int mid, int high) {
        int count = 0;
        int right = mid + 1;
        
        for (int i = low; i <= mid; i++) {
            while (right <= high && (long long)arr[i] > 2LL * arr[right]) 
                right++;
            count += (right - (mid + 1));
        }
        return count;
    }
    
    // Standard merge function
    void merge(vector<int> &arr, int low, int mid, int high) {
        vector<int> temp;
        int left = low, right = mid + 1;
        
        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right])
                temp.push_back(arr[left++]);
            else
                temp.push_back(arr[right++]);
        }
        
        while (left <= mid) temp.push_back(arr[left++]);
        while (right <= high) temp.push_back(arr[right++]);
        
        for (int i = low; i <= high; i++)
            arr[i] = temp[i - low];
    }
};
